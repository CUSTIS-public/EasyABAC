options
{
  STATIC = false;
  JDK_VERSION = "1.8";
  IGNORE_CASE = false;
  JAVA_UNICODE_ESCAPE = true;
  UNICODE_INPUT = false;
  DEBUG_TOKEN_MANAGER = true;
  FORCE_LA_CHECK = true;
  LOOKAHEAD = 2;
}

PARSER_BEGIN(PolicyExpressionParser)

package custis.easyabac.core.model.policy;

import java.util.Optional;
import custis.easyabac.core.model.policy.*;
import custis.easyabac.core.model.attribute.*;

public class PolicyExpressionParser {

    private Attribute attribute;
    private String attributeValue;
    private Function function;

    public TargetCondition parse() throws ParseException {
        Expression();
        return new TargetCondition(attribute, attributeValue, function);
    }

}

PARSER_END(PolicyExpressionParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
    < ACTION_ID: "action-id" > |
    < SUBJECT_ID: "subject-id" > |
    < RESOURCE_ID: "resource-id" > |
    < IN_OPERATOR: "in" > |
    < SUBSET_OPERATOR: "subset"> |
    < DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* > |
    < STRING_LITERAL : (["A"-"Z"]|["a"-"z"]|["0"-"9"])+ > |
    < OBJECT_PROPERTY : ["A"-"Z"](["A"-"Z"]|["a"-"z"])+"."(["a"-"z"]|["A"-"Z"])+ >
}

void Expression():
{}
{
   TargetExpression() <EOF>
}

void TargetExpression():
{}
{
    AttributeReference() Function() AttributeValue()
}

void AttributeReference():
{
    Token t;
}
{
    <OBJECT_PROPERTY>
    |
    t = <ACTION_ID> { this.attribute = Attribute.ACTION_ID;}
    |
    t = <SUBJECT_ID> { this.attribute = Attribute.SUBJECT_ID;}
    |
    t = <RESOURCE_ID> { this.attribute = Attribute.RESOURCE_ID;}
}

void Function():
{
  Token t;
}
{
    (t = "==" | t = "!=" | t = ">=" | t = "<=" | t = ">" | t = "<" | t = <IN_OPERATOR> | t = "one-of" | t = <SUBSET_OPERATOR>)
    {
        Optional<Function> f = Function.of(t.image);
        if (f.isPresent()) {
            this.function = f.get();
        } else {
            throw new ParseException("Unsupported function " + t.image);
        }
    }
}

void AttributeValue():
{
    Token t;
}
{
  //TODO Add EasyObject.Actions support. Futher, action would be translated as string for XACML Policy
   (t = <STRING_LITERAL> | t = <DECIMAL_LITERAL> | t = <OBJECT_PROPERTY> )
   {
      this.attributeValue = t.image;
   }
}