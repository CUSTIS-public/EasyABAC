options
{
  STATIC = false;
  JDK_VERSION = "1.8";
  IGNORE_CASE = false;
  JAVA_UNICODE_ESCAPE = true;
  UNICODE_INPUT = false;
  DEBUG_TOKEN_MANAGER = false;
  FORCE_LA_CHECK = true;
  LOOKAHEAD = 2;
}

PARSER_BEGIN(PolicyExpressionParser)

package custis.easyabac.model;

import java.util.Optional;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import custis.easyabac.model.IdGenerator;
import custis.easyabac.model.*;
import custis.easyabac.model.attribute.*;

public class PolicyExpressionParser {

    private Attribute leftHandAttribute;
    private Attribute rightHandAttribute;
    private List<String> attributeValues;
    private Function function;

    private Map<String, Attribute> attributes;

    public void setAttributes(Map<String, Attribute> attributes) {
        this.attributes = attributes;
    }

    private Attribute findAttributeById(String id) throws ParseException {
        if (attributes == null) {
            throw new ParseException("Set attributes model for parser first");
        }

        Attribute attribute = this.attributes.get(id);
        if (attribute == null) {
            throw new ParseException(String.format("Attribute %s is not found in the model", id));
        }

        return attribute;
    }

    public TargetCondition parseTargetCondition() throws ParseException {
        TargetExpression();
        return new TargetCondition(leftHandAttribute, attributeValues.get(0), function);
    }

    public Condition parseRuleCondition(boolean negate) throws ParseException {

        RuleConditionExpression();

        if (rightHandAttribute != null) {
            return new Condition(IdGenerator.newId(), negate, leftHandAttribute, rightHandAttribute, function);
        } else if (attributeValues != null && !attributeValues.isEmpty()) {
            return new Condition(IdGenerator.newId(), negate, leftHandAttribute, attributeValues, function);
        }

        throw new ParseException("Neither right hand attribute, nor attribute values are defined");
    }
}

PARSER_END(PolicyExpressionParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
    < ACTION_ID: "action-id" > |
    < SUBJECT_ID: "subject-id" > |
    < RESOURCE_ID: "resource-id" > |
    < IN_OPERATOR: "in" > |
    < SUBSET_OPERATOR: "subset"> |
    < DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* > |
    < TIME_LITERAL: (("0"["1"-"9"])|("1"["0"-"9"])|("2"["0"-"3"]))":"["0"-"5"]["0"-"9"] > |
    < STRING_LITERAL : "'"(["A"-"Z"]|["a"-"z"]|["0"-"9"])+"'" > |
    < OBJECT_PROPERTY : (["A"-"Z"]|["a"-"z"]|"_"|"-")+"."(["a"-"z"]|["A"-"Z"]|"_"|"-")+ >
}

void TargetExpression():
{}
{
    LeftHandAttributeReference() BinaryFunction() ConstantValue() <EOF>
}

void RuleConditionExpression():
{}
{
    LeftHandAttributeReference() (
        (BinaryFunction() ConstantValue())
        |
        (SetFunction() ConstantValuesList())
        |
        ((BinaryFunction() | SetFunction()) RightHandAttributeReference())
    ) <EOF>
}

void LeftHandAttributeReference():
{
    Token t;
}
{
    t = <OBJECT_PROPERTY> { this.leftHandAttribute = findAttributeById(t.image); }
    |
    t = <ACTION_ID> { this.leftHandAttribute = Attribute.ACTION_ID;}
    |
    t = <SUBJECT_ID> { this.leftHandAttribute = Attribute.SUBJECT_ID;}
    |
    t = <RESOURCE_ID> { this.leftHandAttribute = Attribute.RESOURCE_ID;}
}

void RightHandAttributeReference():
{
    Token t;
}
{
    t = <OBJECT_PROPERTY> { this.rightHandAttribute = findAttributeById(t.image); }
    |
    t = <ACTION_ID> { this.rightHandAttribute = Attribute.ACTION_ID;}
    |
    t = <SUBJECT_ID> { this.rightHandAttribute = Attribute.SUBJECT_ID;}
    |
    t = <RESOURCE_ID> { this.rightHandAttribute = Attribute.RESOURCE_ID;}
}

void BinaryFunction():
{
  Token t;
}
{
    (t = "==" | t = "!=" | t = ">=" | t = "<=" | t = ">" | t = "<" | t = <IN_OPERATOR> | t = "one-of" | t = <SUBSET_OPERATOR>)
    {
        Optional<Function> f = Function.of(t.image);
        if (f.isPresent()) {
            this.function = f.get();
        } else {
            throw new ParseException("Unsupported binary function " + t.image);
        }
    }
}

void SetFunction():
{
  Token t;
}
{
    (t = <IN_OPERATOR> | t = "one-of" | t = <SUBSET_OPERATOR>)
    {
        Optional<Function> f = Function.of(t.image);
        if (f.isPresent()) {
            this.function = f.get();
        } else {
            throw new ParseException("Unsupported set function " + t.image);
        }
    }
}

void ConstantValue():
{
    Token t;
}
{
    t = <STRING_LITERAL>
    {
      this.attributeValues = Collections.singletonList(t.image.substring(1, t.image.length() - 1));
    }
    |
    t = <DECIMAL_LITERAL>
    {
      this.attributeValues = Collections.singletonList(t.image);
    }
    |
    t = <TIME_LITERAL>
    {
      this.attributeValues = Collections.singletonList(t.image);
    }
}

void ConstantValuesList():
{
    Token t;
}
{
    "["t =<STRING_LITERAL>{ this.attributeValues = new ArrayList(); this.attributeValues.add(t.image.substring(1, t.image.length() - 1));}
        (","t=<STRING_LITERAL>{this.attributeValues.add(t.image.substring(1, t.image.length() - 1));})*"]"
}